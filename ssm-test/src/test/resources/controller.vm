#parse ("macro.vm")
package com.ssm.${modulePrefix}.web.controller;

import com.ssm.common.page.Page;
import com.ssm.common.web.data.ResponseData;
import com.ssm.common.web.datatable.DataTableRequest;
import com.ssm.common.web.datatable.DataTableResponse;
import com.ssm.common.web.datatable.DataTableUtility;
import com.ssm.${modulePrefix}.api.dto.${modelPrefix};
import com.ssm.${modulePrefix}.api.wrapper.${modelPrefix}Wrapper;
import com.ssm.${modulePrefix}.api.service.${modelPrefix}Service;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;

@Controller
@RequestMapping("/${modulePrefix}/#toLowerCase(${modelPrefix})")
public class ${modelPrefix}Controller {

    @Resource(name = "#toLowerCase(${modelPrefix})Service")
    private ${modelPrefix}Service #toLowerCase(${modelPrefix})Service;

    @RequiresPermissions("#toLowerCase(${modelPrefix}):query")
    @RequestMapping(value = "/list", method = {RequestMethod.GET})
    public String list() throws Exception {
        return "#toLowerCase(${modelPrefix})/list";
    }

    @ResponseBody
    @RequiresPermissions("#toLowerCase(${modelPrefix}):query")
    @RequestMapping(value = "/getList", method = {RequestMethod.POST})
    public DataTableResponse<${modelPrefix}> getList(@RequestBody ${modelPrefix}Wrapper #toLowerCase(${modelPrefix})Wrapper) throws Exception {
        DataTableRequest dtArgs = #toLowerCase(${modelPrefix})Wrapper.getDtArgs();
        Page<${modelPrefix}> page = #toLowerCase(${modelPrefix})Service.getPage(#toLowerCase(${modelPrefix})Wrapper, dtArgs.getStart(), dtArgs.getLength());
        return DataTableUtility.buildDataTable(dtArgs, page);
    }

    @RequiresPermissions("#toLowerCase(${modelPrefix}):create")
    @RequestMapping(value = "/add", method = {RequestMethod.GET})
    public String add() throws Exception {
        return "#toLowerCase(${modelPrefix})/add";
    }

    @ResponseBody
    @RequiresPermissions("#toLowerCase(${modelPrefix}):create")
    @RequestMapping(value = "/addSubmit", method = RequestMethod.POST)
    public ResponseData addSubmit(@RequestBody ${modelPrefix} #toLowerCase(${modelPrefix})) throws Exception {
        #toLowerCase(${modelPrefix})Service.add(#toLowerCase(${modelPrefix}));
        return new ResponseData();
    }

    @RequiresPermissions("#toLowerCase(${modelPrefix}):update")
    @RequestMapping(value = "/edit", method = {RequestMethod.GET})
    public ModelAndView edit(@RequestParam Long id) throws Exception {
        // 将数据填充到Request域并返回指定的逻辑视图
        return new ModelAndView("#toLowerCase(${modelPrefix})/edit", "#toLowerCase(${modelPrefix})", #toLowerCase(${modelPrefix})Service.get${modelPrefix}ById(id));
    }

    @ResponseBody
    @RequiresPermissions("#toLowerCase(${modelPrefix}):update")
    @RequestMapping(value = "/editSubmit", method = {RequestMethod.POST})
    public ResponseData editSubmit(@RequestBody ${modelPrefix} #toLowerCase(${modelPrefix})) throws Exception {
        #toLowerCase(${modelPrefix})Service.update(#toLowerCase(${modelPrefix}));
        return new ResponseData();
    }

    @ResponseBody
    @RequiresPermissions("#toLowerCase(${modelPrefix}):delete")
    @RequestMapping(value = "/delete", method = {RequestMethod.POST})
    public ResponseData delete(@RequestBody ${modelPrefix}Wrapper #toLowerCase(${modelPrefix})Wrapper) throws Exception {
        #toLowerCase(${modelPrefix})Service.delete(#toLowerCase(${modelPrefix})Wrapper.getIds());
        return new ResponseData();
    }

    @ResponseBody
    @RequiresPermissions("#toLowerCase(${modelPrefix}):delete")
    @RequestMapping(value = "/deleteSubmit", method = {RequestMethod.POST})
    public ResponseData deleteSubmit(@RequestParam Long[] ids) throws Exception {
        #toLowerCase(${modelPrefix})Service.delete(ids);
        return new ResponseData();
    }

}
